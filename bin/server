#!/usr/bin/env node

var path = require('path');
var chokidar = require('chokidar');
var domain = require('domain');
var argv = require('minimist')(process.argv.slice(2));
var superstatic = require('../lib/superstatic');
var defaults = require('../lib/defaults');
var ConfigFile = require('../lib/server/settings/file');
var jsun = require('jsun');
var fs = require('fs');
var feedback = require('feedback');
var server;

var port = argv.port || argv.p || defaults.PORT;
var host = argv.host || argv.h || defaults.HOST;
var debug = (argv.quiet || argv.q) ? false : defaults.DEBUG;
var overrideConfig =  parseOverrideConfig(argv);
var cwd = argv._[0]
 ? path.resolve(process.cwd(), argv._[0])
 : defaults.DIRECTORY;
var envJSON = path.join(cwd, "./.env.json");

startServer(function(){
  chokidar.watch(server.settings.getConfigFileName())
    .on('change', configFileChanged);
});

function configFileChanged () {
  console.log('Configuration file changed. Restarting...');
  server.stop(startServer);
}

function startServer (cb) {
  var d = domain.create();
  
  d.run(function () {
    server = createInstance(cwd, host, port);
    server.start(function () {
      console.log('Server started on port ' + port.toString() + '\n');
      cb();
    });
  });
  
  d.on('error', serverErrorHandler);
}

function serverErrorHandler (err) {
  var msg = err.message;
  
  if (err.message.indexOf('EADDRINUSE') > -1) {
    msg = 'That port is already being used by another program.';
  }
  
  feedback.error(msg);
}

function createInstance (cwd, host, port) {
  var localEnv;
  
  try { localEnv = require(envJSON); }
  
  var serverOptions = {
    port: port,
    host: host,
    environment: localEnv,
    cwd: cwd,
    config: overrideConfig || argv.c || argv.config || 'superstatic.json',
    debug: debug,
    _defaults: require('./_defaults') // Insert defaults into settings
  };
  
  return new superstatic.Server(serverOptions);
};

function parseOverrideConfig (argv) {
  var overrideConfig = argv.config || argv.c || undefined;
  
  if (overrideConfig) {
    var parsed = jsun.parse(overrideConfig);
    if (parsed.err) return overrideConfig = undefined;
    
    overrideConfig = parsed.json;
  }
  
  return overrideConfig;
}
